// ===============================
// Google Apps Script — backend API
// ===============================

// === Инициализация форматов ===
function onOpen() {
  const sheet = getLogSheet();
  sheet.getRange('C:C').setNumberFormat('@STRING@'); // колонка "Дата"
}

// === Доступ к листам ===
function getLogSheet() {
  return SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Logs");
}

function getUsersSheet() {
  return SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Users");
}

// === Обработка GET-запроса ===
function doGet(e) {
  try {
    const empId = String(e.parameter.employeeId || '').trim();
    const login = e.parameter.login;
    const password = e.parameter.password;
    const date = String(e.parameter.date || '').trim();

    // Авторизация
    if (login && password) return auth(login, password);

    // Проверка сканов
    if (!empId || !date) return createJsonOutput({ error: "Missing parameters" });

    return getLastScanInfo(empId, date);
  } catch (err) {
    Logger.log("GET error: " + err);
    return createJsonOutput({ error: "Internal server error" });
  }
}

// === Обработка POST-запроса ===
function doPost(e) {
  try {
    const empId  = String(e.parameter.employeeId || '').trim();
    let fullName = String(e.parameter.fullName || '').trim();
    const date   = String(e.parameter.date || '').trim();
    const time   = String(e.parameter.time || '').trim();
    const action = String(e.parameter.action || '').trim();
    const who    = String(e.parameter.who || '').trim();
    const block  = String(e.parameter.block || '').trim();

    if (!empId || !date || !time || !action || !block || !who) {
      return createJsonOutput({ error: "Missing required fields" });
    }

    const sheet = getLogSheet();

    // Попытка найти имя, если не передано
    if (!fullName) {
      const data = sheet.getDataRange().getValues();
      const existing = data.find(row =>
        String(row[0]).trim() === empId && String(row[1]).trim() !== ''
      );
      if (existing) fullName = String(existing[1]).trim();
    }

    sheet.appendRow([empId, fullName, date, time, action, who, block]);

    // Установка форматов
    const lastRow = sheet.getLastRow();
    sheet.getRange(lastRow, 3).setNumberFormat('@STRING@'); // дата (C)
    sheet.getRange(lastRow, 7).setNumberFormat('@STRING@'); // блок (G)

    return createJsonOutput({ status: "ok" });

  } catch (err) {
    Logger.log("POST error: " + err);
    return createJsonOutput({ error: "Internal server error" });
  }
}

// === Авторизация пользователя ===
function auth(login, password) {
  const sheet = getUsersSheet();
  const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 2).getValues();
  const isValid = data.some(row =>
    String(row[0]) === login && String(row[1]) === password
  );
  return createJsonOutput({ auth: isValid });
}

// === Получение информации о последних сканах ===
function getLastScanInfo(empId, date) {
  const sheet = getLogSheet();
  const data = sheet.getDataRange().getValues();

  const nameEntry = data.find(row =>
    String(row[0]).trim() === empId && String(row[1]).trim() !== ''
  );
  const name = nameEntry ? String(nameEntry[1]).trim() : '';

  const matchesToday = data.filter(row =>
    String(row[0]).trim() === empId &&
    String(row[2]).trim() === date
  );

  const scans = matchesToday.length;
  let lastTime = '';

  if (scans > 0) {
    const lastEntry = matchesToday[matchesToday.length - 1];
    const [dateCell, timeCell] = [lastEntry[2], lastEntry[3]];
    const tz = Session.getScriptTimeZone();

    const dateStr = (dateCell instanceof Date)
      ? Utilities.formatDate(dateCell, tz, "dd.MM.yyyy")
      : String(dateCell);

    const timeStr = (timeCell instanceof Date)
      ? Utilities.formatDate(timeCell, tz, "HH:mm:ss")
      : String(timeCell);

    lastTime = `${dateStr} ${timeStr}`;
  }

  return createJsonOutput({
    exists: scans > 0,
    name: name,
    scans: scans,
    lastTime: lastTime
  });
}

// === Формирование JSON-ответа ===
function createJsonOutput(obj) {
  return ContentService.createTextOutput(JSON.stringify(obj))
    .setMimeType(ContentService.MimeType.JSON);
}
